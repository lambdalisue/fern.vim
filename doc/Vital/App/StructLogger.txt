*Vital/App/StructLogger.txt*		Structured logging library

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license


=============================================================================
CONTENTS				*Vital.App.StructLogger-contents*

Introduction			|Vital.App.StructLogger-introduction|
Usage				|Vital.App.StructLogger-usage|
Functions			|Vital.App.StructLogger-functions|


=============================================================================
INTRODUCTION				*Vital.App.StructLogger-introduction*

|Vital.App.StructLogger| is an asynchronous structured logging library.

All messages are buffered in an internal buffer so it won't affect to the
performance of plugins. The buffered messages are flushed when Vim is not
busy.

=============================================================================
USAGE					*Vital.App.StructLogger-usage*

Call |Vital.App.StructLogger.start()| to start logging and use individual
logging method to log messages. Note that all messages prior to the call will
be discarded.
>
	let s:StructLogger = vital#vital#import('App.StructLogger')

	" The following message are immediately discarded
	call s:StructLogger.debug("Debug")
	call s:StructLogger.info("Info")
	call s:StructLogger.warning("Warning")
	call s:StructLogger.error("Error")
	call s:StructLogger.critical("Critical")

	" Start logging
	call s:StructLogger.start(expand("~/logger.jsonl"))

	" The following message are logged
	call s:StructLogger.debug("Debug")
	call s:StructLogger.info("Info")
	call s:StructLogger.warning("Warning")
	call s:StructLogger.error("Error")
	call s:StructLogger.critical("Critical")
<
If you need extra informations, use second, third, ... n-th arguments to add
extra contexts like:
>
	call s:StructLogger.info("Info", {"a": "a"}, {"b": "b"}, {"a": "c"})
	" Logged with `context: {"a": "c", "b": "b"}`
<

=============================================================================
FUNCTIONS				*Vital.App.StructLogger-functions*

					*Vital.App.StructLogger.start()*
.start({filename}[, {options}])
	Start logging to {filename}.

					*Vital.App.StructLogger.stop()*
.stop()
	Stop logging.
	 
					*Vital.App.StructLogger.debug()*
					*Vital.App.StructLogger.info()*
					*Vital.App.StructLogger.warning()*
					*Vital.App.StructLogger.error()*
					*Vital.App.StructLogger.critical()*
.debug({message}[, {context}...])
.info({message}[, {context}...])
.warning({message}[, {context}...])
.error({message}[, {context}...])
.critical({message}[, {context}...])
	Log {message} with a given level and {context}s.

	Note that all messages will be discarded immediately unless
	|Vital.App.StructLogger.start()| has been called.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
