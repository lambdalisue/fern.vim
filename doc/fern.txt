*fern.txt*			General purpose asynchronous tree explorer

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license

=============================================================================
CONTENTS						*fern-contents*

INTRODUCTION				|fern-introduction|
  FEATURES				|fern-features|
USAGE					|fern-usage|
  ACTION				|fern-action|
  CUSTOM				|fern-custom|
INTERFACE				|fern-interface|
  VARIABLE				|fern-variable|
  COMMAND				|fern-command|
  FUNCTION				|fern-function|
CHANGELOG				|fern-changelog|


=============================================================================
INTRODUCTION						*fern-introduction*

*fern.vim* (fern) is a general purpose asynchronous tree explorer written in
pure Vim script. It provides "file" scheme in default to use it as a file
explorer.

-----------------------------------------------------------------------------
FEATURES						*fern-features*

No external dependencies~
	Fern is written in pure Vim script without any external libraries
	(note that vim-jp/vital.vim is bundled, not external dependencies) so
	users do NOT need to install anything rather than fern.vim itself.
	Exception: "trash" feature in Linux.
	https://github.com/lambdalisue/vital-Whisky/issues/31

Asynchronous~
	Fern uses asynchronous technique to perform most of operations so Vim 
	would not freeze during operations. It is probably obvious in Windows 
	while file operations in Windows are relatively slow.

Split windows or project drawer~
	Fern supports both styles; split windows (e.g. netrw) and project
	drawer (e.g.  NERDTree); officially.

Buffer name base~
	Fern is developed based on |BufReadCmd| technique like netrw. Thus any 
	buffer starts from "fern://" are handled by fern and required 
	arguments and options are read from the buffer name. That's why fern 
	integrate well with |session|.

Action~
	Fern provides operation as action. When user hit "?", all actions and
	corresponding mapping (if exist) are shown. When user hit "a", an 
	action prompt will popped up and user can input an action to execute.
	So users don't have to remember complex mappings to execute operation 
	which is not often required.

Window selector~
	Fern has an internal window selector which works like 
	t9md/vim-choosewin.  Users can quickly select which window to open a 
	selected node.
	https://github.com/t9md/vim-choosewin

Renamer (A.k.a exrename)~
	Fern has an internal renamer which works like "exrename" in
	Shougo/vimfiler.  Users can edit multiple path of nodes in Vim's 
	buffer and ":w" to apply changes to actual nodes (file, directory,
	bookmark, etc.)
	https://github.com/Shougo/vimfiler

System CRUD operations ("file" scheme)~
	Fern supports file system CRUD operations. Users can create, delete,
	rename files/directories through fern.

System program support ("file" scheme)~
	Fern supports to open a file/directory through a system default
	program. So it's quite easy to open a directory with Explorer 
	(Windows), Finder (macOS), or whatever.

System trash-bin support ("file" scheme)~
	Fern supports system trash-bin by PowerShell (Windows), osascript 
	(macOS), and 3rd party applications (Linux). Any files/directories 
	deleted by "trash" action are sent to system trash-bin rather than 
	actual delete.


=============================================================================
USAGE							*fern-usage*

Open fern at the current working directory by
>
	:Fern .
<
Or a parent directory of the current buffer by
>
	:Fern %:h
<
On a fern buffer, hit

	"?"	List mappings/actions available
	"a"	Open a prompt to input action to execute

-----------------------------------------------------------------------------
ACTION							*fern-action*

Action is a special mapping which is defined on a fern buffer and looks like:

	<Plug>(fern-action-{name})

where {name} is a name of the action.

Note that any mappings defined in user custom code (|fern-custom|) are
registered as action as well if the name of the mapping followed above rule.

							*fern-action-mapping*
Fern defines the following mappings for actions:

	"?"	List mappings/actions available
	"a"	Open a prompt to input action to execute
	"."	Repeat previous action which has executed from a prompt

Note that |g:fern#disable_default_mappings| does not affect mappings above.
Users have to define alternative mappings to disable default mappings like:
>
	" Use g? to show help instead of ?
	nmap <buffer> g? <Plug>(fern-action-help)
<
							*fern-action-capture*
Use "capture" to redirects an action output to a separate buffer like:
>
	action: capture help
<
							*fern-action-verbose*
Use "verbose" to execute an action in |verbose| mode like:
>
	action: verbose expand
<

-----------------------------------------------------------------------------
CUSTOM							*fern-custom*

Use |FileType| |autocmd| with "fern" like:
>
	function! s:init_fern() abort
	  " Write custom code here
	endfunction

	augroup my-fern
	  autocmd! *
	  autocmd FileType fern call s:init_fern()
	augroup END
<
The autocmd will be called AFTER fern buffer has initialized but BEFORE any
content had loaded.
							*fern-custom-alias*
Fern provides some features as mapping alias. For example, you may found
entries like below by "?":
>
	e                         open       <Plug>(fern-action-open)
	<Plug>(fern-action-open)  open:edit  <Plug>(fern-action-open:edit)
<
Above mean that when you hit "e", the "open" action is executed and the "open"
action execute "open:edit" action.
So if you want to use "open:split" action instead of "open:edit" when you
hit "e", add the following code:
>
	" Use 'open:split' instead of 'open:edit' for 'open' action
	nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:split)
<
							*fern-custom-smart*
Fern provide following mapping helper functions:

	|fern#smart#leaf()|	Return a mapping expression determined by a
				status of a current cursor node

	|fern#smart#drawer()|	Return a mapping expression determined by a
				style of a current fern window

	|fern#smart#scheme()|	Return a mapping expression determined by a
				scheme of a current fern tree

For example, following execute "open" on leaf but "expand" on branch.
>
	nmap <buffer><expr> <Plug>(fern-my-open-or-expand)
	      \ fern#smart#leaf(
	      \   "\<Plug>(fern-action-open)",
	      \   "\<Plug>(fern-action-expand)",
	      \ )
<
See https://github.com/lambdalisue/fern.vim/wiki/ for custom tips.

=============================================================================
INTERFACE						*fern-interface*

-----------------------------------------------------------------------------
VARIABLE						*fern-variable*

*g:fern#debug*
	Set 1 to enable fern debug mode.
	Default: 0

*g:fern#profile*
	Set 1 to enable fern profiling mode.
	Default: 0

*g:fern#logfile*
	A path |String| to log messages or |v:null| to log messages via
	|echomsg|.
>
	let g:fern#logfile = "~/fern.tsv"
<
	Default: |v:null|

*g:fern#loglevel*
	A |Number| to indicate a current loglevel. Use the following constant
	variable to set loglevel.
	*g:fern#logger#DEBUG*		Debug level
	*g:fern#logger#INFO*		Info level
	*g:fern#logger#WARN*		Warn level
	*g:fern#logger#ERROR*		Error level
	Default: |g:fern#logger#ERROR|

*g:fern#opener*
	A default |fern-opener| used to open a fern buffer itself in split
	windows style.
	Default: 'edit'

*g:fern#keepalt_on_edit*
	Set 1 to apply |keepalt| on the "open:edit" action to keep an
	|alternate-file| in a split windows style like:
>
        g:fern#keepalt_on_edit =      0            1
	                         +---------+  +---------+
	:edit A                  |  %:A    |  |  %:A    |
	                         |  #:     |  |  #:     |
	                         +---------+  +---------+
	                              v            v
	                         +---------+  +---------+
	:Fern .                  |  %:fern |  |  %:fern |
	                         |  #:A    |  |  #:A    |
	                         +---------+  +---------+
	                              v            v
	                         +---------+  +---------+
	open:edit                |  %:B    |  |  %:B    |
	on 'B'                   |  #:fern |  |  #:A    |
	                         +---------+  +---------+
<
	Default: 0

*g:fern#keepjumps_on_edit*
	Set 1 to apply |keepjumps| on the "open:edit" action to keep a
	|jumplist| in a split windows style like:
>
        g:fern#keepjumps_on_edit =      0            1
	                           +---------+  +---------+
	                           |  0:A    |  |  0:A    |
	:edit A                    |  1:     |  |  1:     |
	                           |  2:     |  |  2:     |
	                           +---------+  +---------+
	                                v            v
	                           +---------+  +---------+
	                           |  0:fern |  |  0:Fern |
	:Fern .                    |  1:A    |  |  1:A    |
	                           |  2:     |  |  2:     |
	                           +---------+  +---------+
	                                v            v
	                           +---------+  +---------+
	                           |  0:B    |  |  0:B    |
	open:edit                  |  1:fern |  |  1:A    |
	on 'B'                     |  2:A    |  |  2:     |
	                           +---------+  +---------+
<
	Note that even with this option, any |jump-motions| performed in a
	fern buffer updates |jumplist|. For example, if user move cursors by
	"G" in above situation, |CTRL-O| in last step jumps to the fern buffer
	rather than a buffer "A" because a jump for "G" has recoreded in
	|jumplist|.
	Default: 0

*g:fern#disable_default_mappings*
	Set 1 to disable default mappings
	Note that this variable does not affect mappings for actions.
	See |fern-action-mappings| for more detail.
	Default: 0

*g:fern#disable_drawer_auto_winfixwidth*
	Set 1 to disable automatically enable 'winfixwidth' to drawer on
	|BufEnter| autocmd.
	Default: 0

*g:fern#disable_drawer_auto_resize*
	Set 1 to disable automatically resize drawer on |BufEnter| and
	|BufLeave| autocmd.
	Default: 0 

*g:fern#disable_drawer_auto_quit*
	Set 1 to disable automatic Vim quit when there is only drawer.
	Default: 0 

*g:fern#default_hidden*
	Set 1 to enter hidden mode (show hidden files) in default.
	Default: 0

*g:fern#default_include*
	A default |String| pattern used to filter nodes (include).
	Default: ''

*g:fern#default_exclude*
	A default |String| pattern used to filter nodes (exclude).
	Default: ''

*g:fern#renderer*
	A |String| name of renderer used to render tree items. Allowed value
	is a key of |g:fern#renderers|.
	Default: "default"

*g:fern#comparator*
	A |String| name of comparator used to sort tree items. Allowed value
	is a key of |g:fern#comparators|.
	Default: "default"

*g:fern#drawer_width*
	A |Number| width of drawer in default.
	Default: 30

*g:fern#drawer_keep*
	A |Boolean| which indicate wheter the last fern window should be keep
	open or close.
	Default: |v:false|

-----------------------------------------------------------------------------
COMMAND							*fern-command*

							*:Fern*
:Fern {url} [-opener={opener}] [-stay] [-wait] [-reveal={reveal}]
	Open a fern buffer in split windows style with the {opener}.
	If -stay options is specified, the focus stays on a window where the
	command has executed. If -wait option is specified, the command wait
	synchronously until the fern buffer become ready.

							*fern-reveal*
	If {reveal} is specified, parent nodes of the node which is identified
	by the {reveal} are expanded and the node will be focused.
	The {reveal} must be a relative path separated by "/" from the
	specfied {url}.
	Note that if the {url} is for "file" scheme, an absolute path can be
	specified to the {reveal}.
							*fern-opener*
	One of the following value is available for the {opener}:

	"select"	Select which window to open a buffer
	"split"		Open a buffer by |split|
	"vsplit"	Open a buffer by |vsplit|
	"tabedit"	Open a buffer by |tabedit|
	"edit"		Open a buffer by |edit| or fail when the buffer is
			|modified|
	"edit/split"	Open a buffer by |edit| or |split| when the buffer is
			|modified|
	"edit/vsplit"	Open a buffer by |edit| or |vsplit| when the buffer is
			|modified|
	"edit/tabedit"	Open a buffer by |edit| or |tabedit| when the buffer
			is |modified|

	Additionally, any modifiers (|mods|) are allowd to be prepend (e.g.
	"topleft split".)

	Note that the command can be followed by a '|' and another command.

							*:Fern-drawer*
:Fern {url} -drawer [-width={width}] [-keep] [-toggle] ...
	Open a fern buffer in project drawer style with the {width}.

	If the {width} is specified, the width of the window is regulated to
	the specified value. (See |g:fern#drawer_width|)
	If "-keep" options is specified, the buffer won't close even there is
	only this window exist. (See |g:fern#drawer_keep|)
	If "-toggle" option is specified, existing fern buffer will be closed
	rather than opening a new fern buffer when exist.

	See |:Fern| for other arguments and options. Note that -opener options
	is ignored for project drawer style.

							*:FernFocus*
:FernFocus [-drawer]
	Focus a next fern viewer. If "-drawer" option is specified, it focus
	only a project drawer style fern.
	Note that the command can be followed by a '|' and another command.

-----------------------------------------------------------------------------
FUNCTION						*fern-function*

							*fern#smart#leaf()*
fern#smart#leaf({leaf}, {collapsed}[, {expanded}])
	Return one of a given mapping expression determined by a "status" of a
	current cursor node. If the node is leaf, the {leaf} is returned.
	If the node is branch and collapsed, the {collapsed} is returned. If
	the node is branch and expanded, the {expanded} or {collapsed} is
	returned.
>
	" Perform 'open' on leaf node and 'enter' on branch node
	nmap <buffer><expr>
	      \ <Plug>(fern-open-or-enter)
	      \ fern#smart#leaf(
	      \   "\<Plug>(fern-action-open)",
	      \   "\<Plug>(fern-action-enter)",
	      \ )

	" Perform 'open' on leaf node, 'expand' on collapsed node, and
	" 'collapse' on expanded node.
	nmap <buffer><expr>
	      \ <Plug>(fern-open-or-expand-or-collapse)
	      \ fern#smart#leaf(
	      \   "\<Plug>(fern-action-open)",
	      \   "\<Plug>(fern-action-expand)",
	      \   "\<Plug>(fern-action-collapse)",
	      \ )
<
							*fern#smart#drawer()*
fern#smart#drawer({drawer}, {explorer})
	Return one of a given mapping expression determined by the style of
	a current buffer. If the current buffer is drawer, the {drawer} is
	returned. Otherwise the {explorer} is retunred.
>
	" Perform 'expand' on drawer and 'enter' on explorer
	nmap <buffer><expr>
	      \ <Plug>(fern-expand-or-enter)
	      \ fern#smart#drawer(
	      \   "\<Plug>(fern-action-expand)",
	      \   "\<Plug>(fern-action-enter)",
	      \ )
<
							*fern#smart#scheme()*
fern#smart#scheme({default}, {schemes})
	Return one of a given mapping expression determined by the scheme of
	a current buffer. The {schemes} is a |Dict| which key is a name of
	scheme and the value is mapping expression. If no corresponding
	key-value found in {schemes}, the value of {default} is returned.
>
	" Execute 'Fern bookmark:///' or back to a previous file if the
	" scheme is already 'bookmark'
	nmap <buffer><expr><silent>
	      \ <C-^>
	      \ fern#smart#scheme(
	      \   ":\<C-u>Fern bookmark:///\<CR>",
	      \   {
	      \     'bookmark': "\<C-^>",
	      \   },
	      \ )
<
							*fern#smart#ready()*
fern#smart#ready({expr}[, {options}])
	Execute an {expr} as a normal mapping once fern buffer has become
	ready. If no unready fern buffer exists when the function has called,
	it waits {options.timeout} then execute the {expr}.
	Note that this function is NOT for |:map-<expr>| thus use it as a
	normal function (e.g. ":<C-u>call fern#smart#ready(...)")
>
	" Create a new mapping which execute 'tcd:root' action once fern
	" buffer has become ready
	nnoremap <buffer><silent> <Plug>(fern-tcd-on-ready)
	      \ :<C-u>call fern#smart#ready(
	      \   "\<Plug>(fern-action-tcd:root)",
	      \   { 'timeout': 500 },
	      \ )<CR>

	" Use above mapping to automatically execute tcd after enter
	nmap <buffer> <Plug>(fern-enter-and-tcd)
	      \ <Plug>(fern-action-enter)
	      \ <Plug>(fern-tcd-on-ready)
<


=============================================================================
CHANGELOG						*fern-changelog*

2020-06-12 v1.1~
	Collapse node prior to perform modification to fix invalid node update
	issue.
2020-06-02 v1.0~
	First stable release.

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
