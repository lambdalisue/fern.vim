Describe App.StructError
  Before
    let StructError = vital#fila#import('App.StructError')
  End

  Describe .new()
    It returns a special error message
      let e = StructError.new('hello world', { 'foo': 'foo', 'bar': 'bar' })
      Assert Equals(e, json_encode({
            \ 'exception': 'hello world',
            \ 'foo': 'foo',
            \ 'bar': 'bar',
            \}))
    End
  End

  Describe .parse()
    It returns an object from a special error message
      let e = StructError.new('hello world', { 'foo': 'foo', 'bar': 'bar' })
      let o = StructError.parse(e)
      Assert Equals(o, {
            \ 'exception': 'hello world',
            \ 'throwpoint': '',
            \ 'foo': 'foo',
            \ 'bar': 'bar',
            \})
    End
  End

  Describe .cause()
    It recursively parse error message to get the original error
      let e1 = StructError.new('hello world', { 'foo': 'foo1', 'bar': 'bar1' })
      let e2 = StructError.new(e1, { 'foo': 'foo2', 'bar': 'bar2', 'hoge': 'hoge2' })
      let e3 = StructError.new(e2, { 'foo': 'foo3', 'bar': 'bar3', 'hoge': 'hoge3' })
      let e4 = StructError.new(e3, { 'foo': 'foo4', 'bar': 'bar4', 'hoge': 'hoge4' })
      let o = StructError.cause(e4)
      Assert Equals(o, {
            \ 'exception': 'hello world',
            \ 'throwpoint': '',
            \ 'foo': 'foo1',
            \ 'bar': 'bar1',
            \ 'hoge': 'hoge2',
            \})
    End
  End
End
